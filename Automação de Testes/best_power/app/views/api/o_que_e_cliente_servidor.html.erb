<!-- Compiled and minified JavaScript -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/materialize/1.0.0-beta/js/materialize.min.js"></script>

<%= render "navbar"%>
<div class="row">

  <div class="col s3">
    <%= render "sidenav"%>
  </div> 
  
  <div class="col s9">

    <div class="row">
      <div class="col s12" style="margin-top: 20px;">
        <%= link_to "Home", home_index_path, :method => "get", class: "breadcrumb grey-text text-darken-4" %>
        <%= link_to "Home Api", api_home_api_path, :method => "get", class: "breadcrumb grey-text text-darken-4"%>
        <%= link_to "Cliente Servidor", api_o_que_e_cliente_servidor_path, :method => "get", class: "breadcrumb grey-text text-darken-4"%>
      </div>
    </div>

    <div class="center">
      <%= link_to "Voltar", api_o_que_e_api_path, :method => "get", class:  "btn waves-light blue"%>
      <%= link_to "Próximo", api_o_que_e_requisicao_path, :method => "get", class:  "btn waves-light blue"%>
    </div>

    <h2>Cliente-servidor</h2>
    <p>O <strong>cliente</strong> faz pedidos de recursos. Tais pedidos são tecnicamente chamados de <strong>requisições</strong>.
       O pedido é feito à API.</p><p>A API recebe essa requisição e consulta <strong>um computador especial</strong>,
       responsável por organizar a chegada das requisições e buscar os recursos requisitados.
    </p>
    <p>Esse computador é como o que você usa para trabalhar ou assistir um vídeo, mas é bem mais poderoso e 
       tem funções dedicadas à se comunicar em alta-velocidade com outros computadores do mundo. 
       O nome desse computador é <strong>servidor</strong>.
    </p>
    <p>Essa requisição feita pela API é como o garçom falando à cozinha o que o cliente pediu.
    </p>
    <p>O servidor então recebe essa requisição e <strong>retorna</strong> alguma coisa. Esse resposta será detalhada 
       daqui a pouquinho, então segura as pontas e já chegamos lá =)
    </p>
    <p>É importante notar que esse é o modelo de <strong>Web APIs</strong> 
       (que funcionam em aplicações web e/ou mobile). Também existem APIs locais, como as dos sistemas operacionais 
       ou que integram diferentes aplicações (como uma exportação entre formatos diferentes, por exemplo, de uma planilha
       no BrOffice para o Excel).
    </p>
    <p>Portanto, cliente e servidor são <strong>as duas extremidades ligadas por uma API</strong>.
       Um programa executa no cliente, fazendo requisições e outro no servidor, respondendo essas requisições.
       A API é a interface!
    </p>
    <p>
      <%= image_tag("cliente_servidor.png",class: "center")%>
    </p>
    <h2>As regras</h2>
    <p>Essas regras precisam ser seguidas porque a comunicação entre máquinas não é flexível como a humana.
      Tanto cliente quanto servidor devem se atentar às regras.</p><p>De fato, se uma regra não é seguida pelo cliente
      e ele faz uma requisição &#8220;proibida&#8221; ou inexistente, o servidor pode nem entender e retorna um erro!
    </p>
    <p>
      <strong>Os desenvolvedores que estão criando aplicações (clientes) com a API precisam conhecer essas regras.
      Como isso é feito?</strong>
    </p>
    <p>Uma das melhores práticas para exposição de APIs é a criação de um Portal de Desenvolvedores. O portal, em termos
       gerais, é um site com uma série de recursos relevantes para que os devs possam criar boas aplicações com aquela API.
    </p>

    <div class="center">
      <%= link_to "Voltar", api_o_que_e_api_path, :method => "get", class:  "btn waves-light blue"%>
      <%= link_to "Próximo", api_o_que_e_requisicao_path, :method => "get", class:  "btn waves-light blue"%>
    </div>

  </div>

</div>

<!-- Hotjar Tracking Code for https://automacaocombatista.herokuapp.com/ -->
<script>
    (function(h,o,t,j,a,r){
        h.hj=h.hj||function(){(h.hj.q=h.hj.q||[]).push(arguments)};
        h._hjSettings={hjid:927077,hjsv:6};
        a=o.getElementsByTagName('head')[0];
        r=o.createElement('script');r.async=1;
        r.src=t+h._hjSettings.hjid+j+h._hjSettings.hjsv;
        a.appendChild(r);
    })(window,document,'https://static.hotjar.com/c/hotjar-','.js?sv=');
</script>